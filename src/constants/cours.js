export const data = [
	{
		categorie: 'js',
		cours: [
			{
				title: 'Javascript 1',
				btnSlug: 'Javascript 1',
				body: {
					subtitle: {
						txt: 'D√©buter en Javascript',
					},
					text: [
						{
							body: [
								{
									txt: 'Premier Texte Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eos, explicabo.',
								},
								{
									img: {
										src: 'https://images.innoveduc.fr/react/02-component/react-component-name-misspelling.png',
										width: '100%',
										height: '90px',
									},
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react;
								
		export const App = () => {
			// Mon Code
		}
		
		export default App;`,
										},
									],
								},
								{
									txt: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque dolor veniam aliquam error non, atque iste aut soluta corporis corrupti.',
								},
							],
						},
					],
				},
			},
			{
				title: 'Javascript 2',
				btnSlug: 'Javascript 2',
				body: {
					subtitle: {
						txt: 'Continuer en Javascript',
					},
					text: [
						{
							body: [
								{
									txt: 'Deuxi√®me Texte Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eos, explicabo.',
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react;
								
		export const App = () => {
			// Mon Code
		}
		
		export default App;`,
										},
									],
								},
								{
									txt: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque dolor veniam aliquam error non, atque iste aut soluta corporis corrupti.',
								},
								{
									isList: true,
									txt: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque dolor veniam aliquam error non, atque iste aut soluta corporis corrupti.',
								},
								{
									isList: true,
									txt: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque dolor veniam aliquam error non, atque iste aut soluta corporis corrupti.',
								},
								{
									isList: true,
									txt: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque dolor veniam aliquam error non, atque iste aut soluta corporis corrupti.',
								},
							],
						},
					],
				},
			},
		],
	},
	{
		categorie: 'react',
		cours: [
			{
				title: 'üë©‚Äçüè´ Le CSS dans React',
				btnSlug: 'Le CSS dans React',
				body: {
					subtitle: {
						color: 'text-red-500',
						txt: 'Introduction',
					},
					text: [
						{
							body: [
								{
									txt: `Le Style de notre application a un impact tr√®s important sur l'apparence des composants, l‚Äôinteraction utilisateur et son ressenti. Il y a de multiples fa√ßons de styliser notre application React, et nous allons en examiner quelques-unes. Gardes en t√™te qu'il n'y a pas de bonne ou de mauvaise fa√ßon de styliser : utilise la fa√ßon qui s'adapte le mieux √† ton projet ! Nous allons aborder quelques m√©thodes pour styliser une application React, chaque m√©thode sera suivie d'un exemple de mise en pratique.`,
								},
								{
									txt: `C'est parti ! üöÄ`,
								},
								{
									img: {
										src: 'https://miro.medium.com/proxy/1*YDskBoEKfDDMtI6LMJVKLw.png',
										width: '100%',
										height: '60px',
									},
								},
								{
									txt: `‚úÖ Diff√©rentes fa√ßon de styliser tes composants en React`,
								},
								{
									title: {
										color: 'text-red-400',
										txt: `üñåÔ∏è Le CSS standard`,
									},
								},
								{
									txt: `C'est la premi√®re m√©thode que nous allons √©voquer pour int√©grer du CSS dans ton application React. Tu es d√©j√† familier avec cette m√©thode, car tu l'utilises d√©j√†.`,
								},
								{
									txt: `üëç Avantages : bonnes performances, facile √† mettre en ≈ìuvre, car tu connais d√©j√† le CSS. S'adapte √©galement bien avec des framework CSS comme Tailwind CSS (tu peux voir le guide d'installation avec CRA [qui marche aussi avec un project vite], ou choisis un autre framework CSS sur State of CSS survey).`,
								},
								{
									txt: `üëé Inconv√©nients : difficile √† maintenir, plus difficile √† faire √©voluer. Impossible de calculer des styles dynamiques.`,
								},
								{
									isList: true,
									txt: `simplement importer ton fichier CSS dans ton composant:`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `// Example.js
import React from 'react';
import "./App.css";

export default function App(){
	return <div className="my-class">Hello world</div>
}`,
										},
									],
								},
								{
									txt: `Il est important de mentionner que lorsque tu cr√©es une r√®gle CSS (class ou ID) avec cette m√©thode, elle sera disponible dans toute l'application (pour les autres composants) quand tu importes le fichier.`,
								},
								{
									txt: `Pourquoi className et pas juste class ?`,
								},
								{
									txt: `Parce que l'attribut class est un mot r√©serv√© en JavaScript. Et le JSX utilise du JavaScript.`,
								},
								{
									hr: true,
								},
								{
									txt: 'Et ton App.css ressemblerait √† ceci:',
								},
								{
									sample: [
										{
											style: 'css',
											code: `.my-class {
	color: red;
}`,
										},
									],
								},
								{
									title: {
										color: 'text-red-500',
										txt: `üî¨Teste le`,
									},
								},
								{
									txt: `Maintenant c'est ton tour ! Essayes sur l'exercice ci-dessous. N'h√©site pas √† exp√©rimenter avec ce code !`,
								},
								{
									stack:
										'https://stackblitz.com/edit/react-auna9u?file=src/App.js&embed=1',
								},
								{
									title: {
										color: 'text-red-400',
										txt: 'üé® Int√©grer le CSS',
									},
								},
								{
									txt: `Tout comme en HTML, nous pouvons utiliser l'attribut style dans notre application React pour appliquer notre CSS, mais avec quelques l√©g√®res diff√©rences : au lieu d'appliquer des propri√©t√©s avec des classes ou des ID CSS, nous les passons directement aux √©l√©ments JSX en tant qu'objet. De plus, les propri√©t√©s doivent √™tre en camelCase.`,
								},
								{
									txt: `üëç Avantages : comme nous avons affaire √† un objet, nous pouvons l'√©tendre et ajouter d'autres propri√©t√©s, changer les valeurs de mani√®re conditionnelle.`,
								},
								{
									txt: `üëé Inconv√©nients : pas √©volutif, impossible d'utiliser les media queries et les pseudo-classe`,
								},
								{
									hr: true,
								},
								{
									txt: `L'exemple suivant, illustre comment nous cr√©ons un composant React (ligne 4), comment nous cr√©ons les styles pour ce composant (ligne 5), et comment appliquer ces styles au composant (ligne 17)`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `// InLineStyle.js
import React from 'react';

const InLineStyle = () => {
	const container = {
		display: 'flex',
		flexDirection: 'column',
		alignItems: 'center',
		justifyContent: 'center',
		width: '100%',
		padding: '50px',
		color: '#444',
		border: '1px solid #1890ff',
	}

	return (
		<div style={container}>
			<h1 style={{color: '#0d1a26', fontWeight: 400}}>Hey! We're using inline style!</h1>
		</div>
	)
}

export default InLineStyle;`,
										},
									],
								},
								{
									title: {
										color: 'text-red-500',
										txt: `üî¨Teste le`,
									},
								},
								{
									txt: `Maintenant c'est ton tour ! Essayes sur l'exercice ci-dessous. N'h√©site pas √† exp√©rimenter avec ce code !`,
								},
								{
									stack:
										'https://stackblitz.com/edit/react-fhqkes?file=src/App.js&embed=1',
								},
								{
									title: {
										color: 'text-red-400',
										txt: `üñºÔ∏è Les Modules CSS`,
									},
								},
								{
									txt: `Les Modules CSS t'aideront √† faire en sorte que les classes CSS aient une port√©e locale pour un composant, √©vitant ainsi les conflits de noms de classes que tu pourrais r√©p√©ter dans ton application. Tu peux √©galement ajouter des classes globales en utilisant :global devant le nom de la classe.`,
								},
								{
									txt: `Ils sont mis en ≈ìuvre de la m√™me mani√®re que le CSS normal. Tu dois d√©finir un fichier externe (e.g. App.module.css). Importe-le dans ton composant. Et utilise l'attribut className pour d√©finir les classes.`,
								},
								{
									txt: `üëç Avantages : pas de conflit dans les noms de classe,`,
								},
								{
									txt: `üëé Inconv√©nients : difficile de partager le m√™me style entre les composants`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `
// CssModule.js
import React from 'react';
import styles from './css.module.css'

const CssModule = () => {
	return (
		<div className={styles.container}>
			<h1 className={styles.title}>Example Css Module.</h1>
			<button className={styles.button}>Button</button>
		</div>
	);
};

export default CssModule;`,
										},
										{
											style: 'css',
											code: `
/* css.module.css */

.container {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-evenly;
}

.title {
	color: red;
	font-weight: 700;
}

.button {
	background-color: #000000;
	width: 60px;
}`,
										},
									],
								},
								{
									title: {
										color: 'text-red-500',
										txt: 'üî¨ Teste le',
									},
								},
								{
									txt: `Maintenant c'est ton tour ! Essayes sur l'exercice ci-dessous. N'h√©site pas √† exp√©rimenter avec ce code !`,
								},
								{
									stack:
										'https://stackblitz.com/edit/react-cumu36?file=src/App.js&embed=1',
								},
							],
						},
						// Fin du tableau cours
					],
				},
			},
			{
				title: `üë©‚Äçüè´ React Basics 01 - Qu'est-ce que React ?`,
				btnSlug: `Qu'est-ce que React ?`,
				body: {
					subtitle: {
						color: 'text-red-500',
						txt: 'Introduction',
					},
					text: [
						{
							body: [
								{
									txt: `Pour commencer ton voyage dans le monde de React, avant de commencer √† √©crire du code, tu dois comprendre ce qu'est React, son histoire et ce que tu peux construire en l'utilisant.`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/m1HNVtIySoXosQGxYaZNTtMIsPMylf2z.jpeg',
										width: '800px',
									},
								},
								{
									title: {
										txt: `ü§ì √Ä la fin de cette qu√™te, tu comprendras:`,
									},
								},
								{
									isList: true,
									txt: `‚úÖ Ce qu'est React`,
								},
								{
									isList: true,
									txt: `‚úÖ Comment les applications front-end √©taient construites avant React`,
								},
								{
									isList: true,
									txt: `‚úÖ Pourquoi tu devrais utiliser React`,
								},
								{
									title: {
										txt: `üìñ D√©finition`,
									},
								},
								{
									txt: `React est une biblioth√®que JavaScript open-source construite / maintenue par Facebook ainsi que par une communaut√© de d√©veloppeurs individuels et d'entreprises.`,
								},
								{
									txt: `Son but est de construire des interfaces utilisateurs ou des composants d'interface utilisateur (une prochaine qu√™te expliquera ce que sont les composants).
								React peut √™tre utilis√© comme base pour le d√©veloppement d'applications monopages (Single Page Application - SPA).`,
								},
								{
									title: {
										txt: `üìï La vie avant React`,
									},
								},
								{
									isList: true,
									txt: `Avant JavaScript, les navigateurs r√©cup√©raient et affichaient les documents HTML depuis le serveur.`,
								},
								{
									isList: true,
									txt: `Les seules interactions possibles √©taient le click sur les liens et la soumission de formulaires.`,
								},
								{
									isList: true,
									txt: `JavaScript est arriv√© en apportant avec lui la manipulation du DOM, ce qui a permis d'avoir des interfaces utilisateur interactives.`,
								},
								{
									isList: true,
									txt: `La cr√©ation d'applications utilisant les fonctions natives du DOM est fastidieuse et n√©cessite une grande quantit√© de code.`,
								},
								{
									isList: true,
									txt: `Puis vint la naissance des biblioth√®ques front-end telles que React & Angular.`,
								},
								{
									title: {
										txt: `ü§î Pourquoi devrais-tu utiliser un Framework/biblioth√®que ?`,
									},
								},
								{
									isList: true,
									txt: `C'est tr√®s rapide. (gr√¢ce √† son DOM virtuel)`,
								},
								{
									isList: true,
									txt: `C'est une des librairies front-end les plus populaires. Du coup, il y a beaucoup d'offres d'emploi disponibles.`,
								},
								{
									isList: true,
									txt: `Cela facilite l'√©criture d'applications √† grande √©chelle,`,
								},
								{
									isList: true,
									txt: `Afin de rendre notre code plus court et plus polyvalent,`,
								},
								{
									isList: true,
									txt: `Afin d'√©tablir une fa√ßon coh√©rente de programmer dans une √©quipe de d√©veloppement en utilisant une biblioth√®que standardis√©e.`,
								},
								{
									txt: `Depuis que Facebook l'a introduit en 2013, React est devenu une biblioth√®que front-end tr√®s populaire.`,
								},
								{
									title: {
										txt: `üîß Que peux-tu construire avec React ?`,
									},
								},
								{
									txt: `Avec React, tu peux :`,
								},
								{
									isList: true,
									txt: `Cr√©er ta propre plateforme de streaming comme Netflix`,
								},
								{
									isList: true,
									txt: `Cr√©er un c√©l√®bre r√©seau social`,
								},
								{
									txt: `Et bien d'autres choses encore...`,
								},
								{
									title: {
										txt: '‚òùÔ∏è R√©sum√©',
									},
								},
								{
									isList: true,
									txt: `React est utilis√© pour construire des interfaces utilisateur ou des composants d'interface utilisateur`,
								},
								{
									isList: true,
									txt: `Il a √©t√© cr√©√© pour permettre une programmation coh√©rente`,
								},
								{
									isList: true,
									txt: `Avant React, les sites Web √©taient interactifs en utilisant la manipulation du DOM en JavaScript`,
								},
							],
						},
					],
				},
			},
			{
				title: `üë©‚Äçüè´ React Basics 02 - Qu'est-ce qu'un composant ?`,
				btnSlug: `Qu'est-ce qu'un composant ?`,
				body: {
					subtitle: {
						color: 'text-red-500',
						txt: `Introduction`,
					},
					text: [
						{
							body: [
								{
									txt: `Dans la qu√™te pr√©c√©dente, tu as d√©couvert ce qu'est React.`,
								},
								{
									txt: `Avant de commencer √† coder et √† t'entra√Æner, nous avons un petit pas √† faire.`,
								},
								{
									txt: `Nous devons apprendre ce qu'est un composant React, la philosophie de React ainsi que la hi√©rarchie de notre application.`,
								},
								{
									bold: true,
									txt: `D√©butons !`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/NEhAhcWv1jifF2hqDKow7EZC3Qm1Hq4v.jpeg',
										width: '800px',
									},
								},
								{
									txt: `ü§ì √Ä la fin de cette qu√™te, tu seras capable de comprendre ce qui suit:`,
									bold: true,
								},
								{
									txt: `‚úÖ Qu'est-ce qu'un composant React`,
									semiBold: true,
									isList: true,
								},
								{
									txt: `‚úÖ Quelle est la hi√©rarchie des composants React`,
									semiBold: true,
									isList: true,
								},
								{
									txt: `‚úÖ Pourquoi utilisons-nous des composants`,
									semiBold: true,
									isList: true,
								},
								{
									txt: `‚úÖ Comment d√©composer une UI en composants`,
									semiBold: true,
									isList: true,
								},
								{
									title: {
										txt: `Qu'est-ce qu'un composant ?`,
									},
								},
								{
									isList: true,
									txt: `Il s'agit essentiellement de blocs qui composent une application.`,
								},
								{
									isList: true,
									txt: `Le terme "composant" est utilis√© pour d√©signer un √©l√©ment ou une section d'une page, comme le montre l'image ci-dessous.`,
								},
								{
									isList: true,
									txt: `Ils divisent et isolent les √©l√©ments au sein de l'interface utilisateur √† des fins visuelles et comportementales.`,
								},
								{
									isList: true,
									txt: `Un composant peut √™tre d√©compos√© davantage et contenir d'autres composants pour constituer des pages comme dans l'image ci-dessous.`,
								},
								{
									isList: true,
									txt: `L'image contient de multiples composants qui constituent un composant page, par exemple une page d'accueil.`,
								},
								{
									img: {
										src: 'https://codippa.com/wp-content/uploads/2019/02/react-component-2.png',
										width: 500,
										height: 600,
									},
								},
								{
									title: {
										txt: `Hi√©rarchie des composants`,
									},
								},
								{
									isList: true,
									txt: `Dans React, il y a une hi√©rarchie lors de la construction d'une application.`,
								},
								{
									isList: true,
									txt: `Typiquement, dans la plupart des applications, nous avons un composant racine appel√© App, c'est l√† que tous les autres composants finissent par atteindre l'arbre des composants.`,
								},
								{
									isList: true,
									txt: `Comme on peut le voir dans le composant App, il y a un composant enfant appel√© contacts.`,
								},
								{
									isList: true,
									txt: `Contacts contient les composants enfants suivants AddContact, ContactList & SearchBar.`,
								},
								{
									isList: true,
									txt: `AddContact contient un composant enfant AddContactForm.`,
								},
								{
									isList: true,
									txt: `ContactList contient aussi un composant enfant ContactCard.`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/CywzyRPJDjWtsAQLfXHVQnK7mktTGNwc.png',
										width: 700,
										height: 600,
									},
								},
								{
									txt: `Lorsque des composants sont contenus dans d'autres composants plus haut dans l'arbre (par exemple ContactList contient la ContactCard), il s'agit de relations parent (ContactList) et enfant (ContactCard).
								Elles sont un √©l√©ment cl√© de la construction d'applications React coh√©rentes et √©volutives.`,
								},
								{
									txt: `Tous les composants peuvent √™tre les parents ou les enfants d'un autre composant (√† l'exception de App, qui ne peut √™tre que le parent).`,
								},
								{
									title: {
										txt: `Comment diviser une page en composants`,
									},
								},
								{
									txt: `En divisant l'application en composants, il est possible d'indiquer ces divisions en utilisant des "bo√Ætes" de couleur :`,
								},
								{
									img: {
										src: 'https://images.innoveduc.fr/react/01-introduction-jsx/chat-widget-component-hierarchy.png',
										width: 700,
									},
								},
								{
									txt: `De cette fa√ßon, nous cr√©ons une hi√©rarchie de composants, comme nous l'avons vu dans la section pr√©c√©dente. L'un dans l'autre ! Tout en haut de la hi√©rarchie se trouve une bo√Æte orange. Elle contient deux cases roses : la "barre lat√©rale" et la "fen√™tre de message".`,
								},
								{
									txt: `√Ä leur tour, ces bo√Ætes contiennent des bo√Ætes violettes, qui elles-m√™mes contiennent des bo√Ætes vertes.`,
								},
								{
									txt: `En d'autres termes, le composant "sidebar" contient le composant "champ de recherche" et le composant "liste de personnes".`,
								},
								{
									txt: `Ce dernier contient le composant "personne", r√©p√©t√© autant de fois que l'utilisateur a de correspondants.`,
								},
								{
									title: {
										txt: `Pourquoi utilisons-nous des composants ?`,
									},
								},
								{
									isList: true,
									txt: `Afin d‚Äô√©crire ton code une fois et de le r√©utiliser facilement`,
								},
								{
									isList: true,
									txt: `Par exemple, quand tu √©cris une Navbar en HTML, tu dois copier et coller ton HTML sur chaque page pour afficher la Navbar.`,
								},
								{
									isList: true,
									txt: `En utilisant React, tu peux √©crire ce "HTML " une fois et l'importer dans toutes les zones de ton application o√π il est n√©cessaire. Nous te montrerons un exemple similaire dans les prochaines qu√™tes.`,
								},
								{
									isList: true,
									txt: `Tu peux isoler tout le comportement et la pr√©sentation de chaque composant sans avoir d'impact sur le reste de l'UI.`,
								},
								{
									isList: true,
									txt: `En √©crivant le composant une fois, cela augmente la r√©utilisabilit√© et l'extensibilit√©.`,
								},
								{
									title: {
										txt: `‚òùÔ∏è R√©capitulatif`,
									},
								},
								{
									isList: true,
									txt: `Un composant est un √©l√©ment constitutif d'une application.`,
								},
								{
									isList: true,
									txt: `Le terme "composant" est utilis√© pour d√©signer un √©l√©ment ou une section d'une page`,
								},
								{
									isList: true,
									txt: `La hi√©rarchie des composants repr√©sente un arbre de composants qui, √† leur tour, montrent les relations entre les parents et les enfants.`,
								},
								{
									isList: true,
									txt: `Nous utilisons les composants √† des fins de r√©utilisation et d'√©volutivit√©.`,
								},
							],
						},
					],
				},
			},
			{
				title: `üë©‚Äçüè´ React Basics 03 - Qu'est-ce que JSX`,
				btnSlug: `Qu'est-ce que JSX`,
				body: {
					subtitle: {
						color: 'text-red-500',
						txt: 'Introduction',
					},
					text: [
						{
							body: [
								{
									txt: `Dans cette qu√™te, nous allons d√©couvrir JSX, ainsi que quand et comment l'utiliser.`,
								},
								{
									bold: true,
									txt: `Commen√ßons ! üöÄ`,
								},
								{
									img: {
										src: 'https://res.cloudinary.com/practicaldev/image/fetch/s--9hrIvLVU--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/9tzvuoyi4q1xo7jo6bil.png',
										width: '100%',
									},
								},
								{
									title: {
										txt: `ü§ì √Ä la fin de cette qu√™te, tu pourras :`
									}
								},
								{
									txt: `‚úÖ Comprendre comment une application React est affich√©e`
								},
								{
									txt: `‚úÖ Comprendre la notation JSX`
								},
								{
									title: {
										txt: `Qu'est-ce que JSX ?`,
									},
								},
								{
									txt: `JavaSscript XML. Il ajoute des fonctionnalit√©s XML √† JavaScript. Cela signifie que tu vas d√©sormais pouvoir m√©langer JavaScript avec des balises HTML (fonctionnalit√©s telles que HTML) et des fonctionnalit√©s XML (comme les accolades de donn√©es). Juste comme √ßa :`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `<div>
	<h1>I am HTML 1+1=2</h1>
	<h2>{"I am data from XML, I'll do a match operation:"} {1+1}</h2>
</div>`,
										},
									],
								},
								{
									hr: true,
								},
								{
									txt: `Voyons un autre exemple. Le code ci-dessous montre comment tu peux d√©finir une constante javascript (const name = 'John'), une balise <div /> et les m√©langer √† l'aide d'un <p>{name}</p>`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `const name ='John Doe';
const element = (
<div className="person-item">
		<p>{name}</p>
</div>
);

ReactDOM.render(
element,
document.getElementById('root')
);`,
										},
									],
								},
								{
									txt: `Donc, dans cette exemple :`,
								},
								{
									isList: true,
									txt: `Il existe une variable appel√©e name, qui a la valeur de 'John Doe'`,
								},
								{
									isList: true,
									txt: `Il existe une variable appel√©e element qui contient un √©l√©ment div.`,
								},
								{
									isList: true,
									txt: `Dans cette variable element, tu affiches la valeur de name en utilisant <p>{name}</p>`,
								},
								{
									isList: true,
									txt: `C'est l'utilisation d'accolades dans JSX te permet d'afficher des valeurs dans le code.`,
								},
								{
									isList: true,
									txt: `Il existe une m√©thode appel√©e ReactDOM.render() et cette m√©thode prend deux arguments :
									`,
								},
								{
									isList: true,
									txt: `1 - Le premier est ce que tu veux afficher dans le navigateur. Dans ce cas, c'est la variable element.`,
								},
								{
									isList: true,
									txt: `2 -Le second est l'endroit o√π il sera inject√© document.getElementById('root')`,
								},
								{
									hr: true,
								},
								{
									stack:
										'https://stackblitz.com/edit/01-react-jsx?file=src/index.js&embed=1',
								},
								{
									info: true,
									semiBold: true,
									txt: `Exp√©rimente avec l'exemple ci-dessus. Essaie de cr√©er d'autres variables et affiche-les dans le JSX`,
								},
								{
									title: {
										txt: `üí™ Challenge`,
									},
								},
								{
									txt: `Pour les prochaines qu√™tes, ton objectif est de cr√©er une application de liste de contacts. Nous allons construire cette application petit √† petit. Ajout de style, de props, d'imports et d'exports, et plus encore dans chaque qu√™te.`,
								},
								{
									txt: `Cette application doit afficher les e-mails, les t√©l√©phones, les noms et un bouton de suppression pour chaque contact.`,
								},
								{
									txt: `√Ä la fin de toutes vos qu√™tes, cela devrait ressembler √† ceci :`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/DQWd1IrDBRtQMfZcbPhCFEvvDJ66J3CR.png',
										width: '100%',
									},
								},
								{
									txt: `Commence par forker le mod√®le fourni apr√®s t'√™tre connect√© √† StackBlitz :`
								},
								{
									link: true,
									txt: `Mod√®le`,
									address: 'https://stackblitz.com/edit/01-react-challange-jqk2x3?file=src%2Findex.js'
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/9AdopQRYrdHCFpJVCsWHn2F4btXIseuT.png',
										width: '100%'
									}
								},
								{
									txt: `Dans ce mod√®le, un seul √©l√©ment JSX est fourni, mais il ne contient qu'une seule <div> vide, √† l'int√©rieur de laquelle tu dois ajouter tout ton contenu.`
								},
								{
									txt: `Voici quelques lignes directrices :`
								},
								{
									isList: true,
									txt: `Utilise du HTML statique uniquement.`
								},
								{
									isList: true,
									txt: `Ne modifie pas le CSS, m√™me si le r√©sultat n'est pas exactement comme sur la maquette.`
								},
								{
									isList: true,
									txt: `Utilise une <div/> pour contenir chaque contact.`
								},
								{
									isList: true,
									txt: `Utilise un <h3> pour contenir le nom`
								},
								{
									isList: true,
									txt: `Utilise un <h4> pour contenir l'e-mail et le t√©l√©phone (utilise un <br /> pour les s√©parer).`
								},
								{
									isList: true,
									txt: `Utilise un <button> pour ajouter le bouton de suppression.`
								},
								{
									txt: `Poste l'URL de ton StackBlitz afin de valider ta qu√™te.`
								},
								{
									title: {
										txt: `üßê Crit√®res de validation`
									}
								},
								{
									isList: true,
									txt: `Il y a au moins 5 contacts dans ton application`
								},
								{
									isList: true,
									txt: `La <div> est un parent des √©l√©ments <h3>, <h4> et <button>`
								},
								{
									isList: true,
									txt: `Le code est disponible sur StackBlitz`
								},
							],
						},
					],
				},
			},
			{
				title: `üë©‚Äçüè´ React Basics 04 - Ton premier composant React`,
				btnSlug: `Ton premier composant React`,
				body: {
					text: [
						{
							body: [
								{
									title: {
										txt: `ü§ì A la fin de cette qu√™te, tu seras capable de :`
									}
								},
								{
									txt: `‚úÖ Comprendre comment cr√©er et utiliser un composant dans React.`
								},
								{
									txt: `‚úÖ Comprendre comment fonctionne la r√©-utilisabilit√© d'un composant dans React.`
								},
								{
									txt: `‚úÖ Comprendre la structure d'un composant √©crit √† l'aide d'une fonction ou d'une classe.`
								},
								{
									hr: true,
								},
								{
									txt: `Maintenant que tu as commenc√© ton carnet de contacts, tu sais comment √©crire du code React, f√©licitations !`,
								},
								{
									txt: `Mais il y avait un probl√®me, ou plus particuli√®rement, un probl√®me de duplication.`,
								},
								{
									txt: `Peut-√™tre as-tu utilis√© le copier-coller pour cr√©er plusieurs contacts ?
								Et peut-√™tre as-tu utilis√© ton code JSX qui est super long ? Et peut-√™tre r√©p√©titif (la structure HTML est la m√™me mais avec des informations diff√©rentes)`,
								},
								{
									txt: `Ne verrais-tu pas un moyen plus efficace ?`,
								},
								{
									txt: `C'est le moment d'introduire de nouveaux concepts :`,
								},
								{
									bold: true,
									txt: `React Components`,
								},
								{
									title: {
										color: 'text-red-500',
										txt: `Qu'est-ce qu'un composant React ?`,
									},
								},
								{
									txt: `C'est un bout de code r√©utilisable et ind√©pendant.`,
								},
								{
									title: {
										color: 'text-red-500',
										txt: `Quels sont les diff√©rents types de composant en React ?`,
									},
								},
								{
									txt: `Il existe 2 types de composant :`,
								},
								{
									isList: true,
									bold: true,
									txt: `Functional components`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `function MyComponent() {
// Je peux ajouter n'importe quel code en Javascript ici ! üëç 
const myName = 'Bob';

return (
	<div>
		<h1>Je peux √©crire ce que je veux ici, c'est du JSX !</h1>
		<p>Bonjour {myName}</p>
	</div>
);
}

// Les fonction fl√©ch√©es fonctionnent √©galement üëç
const MyComponent = () => {
// Je peux ajouter n'importe quel code en Javascript ici ! üëç 
const myName = 'Bob';

return (
	<div>
		<h1>Je peux √©crire ce que je veux ici, c'est du JSX !</h1>
		<p>Bonjour {myName}</p>
	</div>
);
};`,
										},
									],
								},
								{
									isList: true,
									bold: true,
									txt: `Class components`,
								},
								{
									txt: `Comme son nom l'indique, ce sont des classes Javascript (au lieu de fonctions). Ces classes doivent impl√©menter une m√©thode render() afin de renvoyer le code JSX qui sera interpr√©t√© par le navigateur.`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `class MyComponent {
render() {
	// N'oublie pas de retourner de bloc JSX ‚òùÔ∏è
	return (
		<div>
			<h1>Je peux √©crire ce que je veux ici</h1>
		</div>
	);
}
}`,
										},
									],
								},
								{
									semiBold: true,
									txt: `Il y a beaucoup de diff√©rences entre les composants fonctionnels et les composants de classe. (mais nous verrons cela un peu plus tard).`,
								},
								{
									txt: `Pour le moment (et pour soucis de simplicit√©), nous utiliserons uniquement les composants fonctionnels dans nos exercices.`,
								},
								{
									hr: true,
								},
								{
									txt: `Chose √† ne PAS oublier : Le nom des composants React (fonctionnels ou de classe), doivent toujours commencer par une majuscule. Si tu ne respectes pas ce principe, tu auras l'erreur suivante dans ton navigateur lorsque tu lanceras ton application :`,
								},
								{
									img: {
										src: 'https://images.innoveduc.fr/react/02-component/react-component-name-misspelling.png',
										width: '100%',
									},
								},
								{
									txt: `A savoir √©galement, les composants React doivent retourner un et un seul n≈ìud DOM. Si ton composants doit renvoyer plusieurs n≈ìuds DOM, tu devras les encapsuler dans un √©l√©ment (n≈ìud) parent :`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `const MyComponent = () => {
	// Ce code g√©n√©rera une erreur üö´
	return (
			<div>
				<h1>Premi√®re div</h1>
			</div>
			<div>
				<h2>Seconde div</h2>
			</div>
	);
};

const MyComponent = () => {
	// Ce code l√† sera quand √† lui valide ‚úÖ
	return (
		<div>
			<div>
				<h1>Premi√®re div</h1>
			</div>
			<div>
				<h2>Seconde div</h2>
			</div>
		</div>
	);
};`,
										},
									],
								},
								{
									txt: `Une fois un composant cr√©√© (avec une fonction ou une classe, peu importe), tu peux l'utiliser dans ton application comme une nouvelle balise HTML (et tu m√™me l'utiliser plusieurs fois si tu le souhaites) :`
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react';

import ReactDOM from 'react-dom';

const MyComponent = () => {
	return (
		<div>
			<div>
				<h1>Premi√®re div</h1>
			</div>
			<div>
				<h2>Seconde div</h2>
			</div>
		</div>
	);
};

export const App = (
	<div>
		<MyComponent />
		<MyComponent />
		<MyComponent />
		<MyComponent />
		<MyComponent />
	</div>
);

ReactDOM.render(App, document.getElementById('root'));`
										}
									]
								},
								{
									title: {
										txt: `üí™ Challenge`
									}
								},
								{
									txt: `Ton but est de cr√©er un composant <Contact /> qui renverra le bloc HTML d'un contact que tu as √©crit dans l'exercice pr√©c√©dent.`
								},
								{
									txt: `Utilise le projet que tu as cr√©√© dans la qu√™te pr√©c√©dente.`,
									bold: true
								},
								{
									txt: `Tu peux aussi utiliser le template suivant si besoin.`
								},
								{
									txt: `Voici les diff√©rents points √† respecter :`
								},
								{
									isList: true,
									txt: `Tu dois cr√©er la fonction nomm√©e Contact. Ce sera ton composant React.`
								},
								{
									isList: true,
									txt: `Le composant <Contact /> doit √™tre un composant fonctionnel.`
								},
								{
									isList: true,
									txt: `Le composant <Contact /> retourne un bloc HTML qui correspond √† un contact :`
								},
								{
									isList: true,
									txt: `1 - Souviens-toi que ton composant ne doit retourner qu'un seul n≈ìud DOM !`
								},
								{
									isList: true,
									txt: `Tu devras supprimer le contact que tu as cr√©√© pr√©c√©demment dans ton App.`
								},
								{
									isList: true,
									txt: `Utilise ton nouveau composant <Contact /> depuis ton App.`
								},
								{
									isList: true,
									txt: `Appelle ton composant 5 fois. Ton contact sera donc affich√© 5 fois avec les m√™me valeurs : ne t'inqui√®te pas, nous am√©liorerons ce composant dans la prochaine qu√™te.`
								},
								{
									txt: `Pour valider ta qu√™te, soumet l'URL de ton StackBlitz.`
								},
								{
									title: {
										txt: `üßê Crit√®res de validation`
									}
								},
								{
									isList: true,
									txt: `Ton code contient un composant <Contact /> qui est cr√©√© et utilis√© dans ton App.`
								},
								{
									isList: true,
									txt: `Ton code est disponible sur StackBlitz.`
								},
							],
						},
					],
				},
			},
			{
				title: `üë©‚Äçüè´ React Basics 05 - Que sont les props dans React ?`,
				btnSlug: `Que sont les props dans React ?`,
				body: {
					subtitle: {
						color: 'text-red-500',
						txt: 'Introduction',
					},
					text: [
						{
							body: [
								{
									txt: `Dans l'exercice pr√©c√©dent, tu as appris √† refactoriser ton code avec des composants ; tu as aussi appris comment afficher le m√™me composant en plusieurs exemplaires. Mais il reste un probl√®me : comment personnaliser chaque instance de ton composant, au lieu d'afficher encore et encore les m√™mes informations ? ü§î`,
								},
								{
									txt: `Ton application ressemble probablement √† ceci pour le moment :`,
								},
								{
									stack:
										'https://stackblitz.com/edit/react-zgha2o?file=src%2Findex.js&embed=1',
								},
								{
									txt: `Y a-t-il un moyen d'utiliser le m√™me composant (m√™mes structure, style et comportement), mais avec des donn√©es diff√©rentes ?`,
								},
								{
									txt: `Bien s√ªr ! Permets-nous de te pr√©senter :`,
								},
								{
									bold: true,
									txt: `React Props`,
								},
								{
									bold: true,
									txt: `Par√© √† d√©coller ! üöÄ`,
								},
								{
									title: {
										bold: true,
										txt: `ü§ì A la fin de cette qu√™te, tu :`,
									},
								},
								{
									isList: true,
									txt: `‚úÖ Comprendras ce que sont les props.`,
								},
								{
									isList: true,
									txt: `‚úÖ Comprendras "comment" les props fonctionnent et transmettent les informations d'un composant parent √† ses enfants`,
								},
								{
									bold: true,
									title: {
										txt: `Composants Parent et Enfant`,
									},
								},
								{
									txt: `Ce concept va √™tre fondamental avant m√™me que l'on parle des props et de leur fonctionnement.
									Prenons un instant pour nous rappeler notre arbre de composants. Tout est bas√© sur une hi√©rarchie. Le composant App est toujours au sommet de cet arbre, et tous les sous-composants sont appel√©s √† partir d'ici.`,
								},
								{
									txt: `On parle de relation Parent/Enfant lorsqu'un composant (Parent) contient un appel √† un autre composant (Enfant). Dans l'application ci-desous le composant App appelle un composant Contact. On dit donc qu'App est le parent de chaque Contact.`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/kmsdzTzxEPWrokUzC0uUXUAfr2a4sscD.png',
										width: '100%',
									},
								},
								{
									txt: `A partir de maintenant, garde ce concept √† l'esprit lorsque tu construis une app en React et que tu utilises des props. R√©f√®re toi toujours √† ton arbre de composants pour d√©terminer o√π devrait se trouver l'information et √† qui elle devrait √™tre transmise.`,
								},
								{
									title: {
										bold: true,
										txt: `Que sont les props ?`,
									},
								},
								{
									txt: `‚Äúprops‚Äù est un mot r√©serv√© en React, et il indique les propri√©t√©s transmises d'un composant √† un autre. Attention, les props sont en lecture seule, ce qui signifie que les donn√©es qu'un composant re√ßoit ne devraient jamais √™tre modifi√©es.`,
								},
								{
									bold: true,
									txt: `Les props sont transmises d'un Parent √† ses Enfants.`,
								},
								{
									txt: `Illustrons tout √ßa avec l'application que nous avons d√©velopp√©e jusqu'ici : Contact devrait recevoir trois props (un nom, un num√©ro de t√©l√©phone et un age). Lorsqu'on appelle le composant depuis App, on va les lui donner avec la syntaxe propri√©t√©=valeur (comme en HTML). Pour y voir clair, voici une illustration :`,
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/AVnFnjet9aMYYX0qRGCHOxzg03yaiJlj.png',
										width: '100%',
									},
								},
								{
									txt: `Une chose importante √† noter :`,
								},
								{
									quote: true,
									txt: `Les propri√©t√©s et leurs valeurs sont "empaquet√©es" dans un objet pour √™tre envoy√©es au composant enfant. Tu peux r√©cup√©rer cet objet gr√¢ce au premier param√®tre de ta fonction composant.`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from "react";

function Contact (props) {
	
	console.log(props)
	// logs: { name: "Emmanuel", phone: "15525264", age: 22 }

	console.log(props.name)
	// logs: "Emmanuel"

	return (
		<div>My Contact component</div>
	)
}

export default Welcome;`,
										},
									],
								},
								{
									quote: true,
									txt: `La propri√©t√© "age" est particuli√®re : on utilise des accolades ({}) qui repr√©sentent une expression JSX. On en reparlera plus en d√©tail dans une prochaine qu√™te mais pour le moment, tu peux te dire que ce qui se trouve dans ces accolades est du code JS qui doit √™tre ex√©cut√© (18+4=22, la vraie valeur de age dans l'objet qui repr√©sente les props)`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react';

const Contact = (props) => {
	console.log(props.age)
	// logs: 22
	
	return <div>My contact component</div>
}


const App = () => {
	return <Contact name="Emmanuel" age={18+4} />
}`,
										},
									],
								},
								{
									txt: `Tu peux envoyer n'importe quel type de donn√©es via ces propri√©t√©s : non seulement des cha√Ænes de caract√®res ("Emmanuel", "15525264"), mais aussi des bool√©ens, tableaux, fonctions, nombres, etc... Mais il te faudra alors utiliser les accolades comme vu ci-dessus, car ce sont des expressions JSX.`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `<Contact name="Emmanuel" isDeletable={false} favoriteColors={["red", "blue"]} />`,
										},
									],
								},
								{
									txt: `Tu peux aussi utiliser ces expressions JSX dans le rendu de ton composant pour afficher le contenu de la variable comme du texte.`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react';

const Contact = (props) => {
	console.log(props.age)
	// logs: 22

	return <div>My age is {props.age}</div>
}

const App = () => {
	// Will show My age is 22 in the browser (not in console)
	return <Contact name="Emmanuel" age={18+4} />
}`,
										},
									],
								},
								{
									quote: true,
									txt: `Si tu ne passes aucune propri√©t√© depuis le parent, l'objet props existera mais sera un objet vide.`,
								},
								{
									sample: [
										{
											style: 'jsx',
											code: `import React from 'react';

const Contact = (props) => {
	console.log(props)
	// will log {}, an empty object

	return <div>Contact component</div>
}


const App = () => {
	return <Contact />
}`,
										},
									],
								},
								{
									txt: `Utiliser les props rend ton composant dynamique, et cela va nous permettre d'afficher du contenu diff√©rent √† chaque appel (en fonction des valeurs envoy√©es) en gardant une structure de base identique.`
								},
								{
									txt: `Prenons un autre exemple : une App qui aura des enfants WelcomeMessage. Le diagramme de notre app ressemblerait √† ceci :`
								},
								{
									img: {
										src: 'https://storage.googleapis.com/quest_editor_uploads/HTrQhaPPcSLFw6utkgXaepQa22G8pgr0.png',
										width: '70%'
									}
								},
								{
									txt: `Et le code ressemblerait √† ceci (tu remarqueras qu'il y a deux fichiers : un App.jsx qui envoie les donn√©es et un WelcomeMessage.jsx qui les re√ßoit) :`
								},
								{
									stack: 'https://stackblitz.com/edit/react-egbryl?file=src%2FApp.js&embed=1'
								},
								{
									isList: true,
									txt: `Dans le code ci-dessus, on appelle deux fois le composant WelcomeMessage depuis App`
								},
								{
									isList: true,
									txt: `Lorsqu'on appelle WelcomeMessage on lui envoie des props sp√©cifiques (le nom: "Luke" ou "John")`
								},
								{
									isList: true,
									txt: `Dans la fonction d√©finie dans src/components/WelcomeMessage.jsx, on re√ßoit les props en tant que param√®tre.`
								},
								{
									isList: true,
									txt: `On utilise ensuite console.log(props) pour afficher le contenu de l'objet dans notre outil de d√©veloppement. Ouvre la console pour voir ce qui s'y passe`
								},
								{
									title: {
										txt: `‚òùÔ∏è R√©sum√©`
									}
								},
								{
									isList: true,
									txt: `Les props transitent d'un composant Parent √† un composant Enfant`
								},
								{
									isList: true,
									txt: `Les props sont en lecture seule`
								},
								{
									isList: true,
									txt: `Les props peuvent √™tre de n'importe quel type (string, fonction, nombre, etc)`
								},
								{
									isList: true,
									txt: `Les props sont toujours repr√©sent√©s dans un objet, avec ses cl√©s et valeurs`
								},
								{
									isList: true,
									txt: `On utilise la syntaxe JSX pour √©valuer des expressions JS dans le retour de notre composant`
								},
								{
									title: {
										txt: `üí™ Challenge`
									}
								},
								{
									title: {
										txt: `Rends ton composant <Contact /> dynamique`,
										color: 'text-red-400'
									}
								},
								{
									txt: `Voici toutes les √©tapes. Lis les toutes avant de d√©marrer le challenge !`
								},
								{
									isList: true,
									txt: `Utilise ce template pour commencer (ou √©dite le code de tes exercices pr√©c√©dents)`
								},
								{
									isList: true,
									txt: `Assure toi d'√™tre bien connect√© √† StackBlitz`
								},
								{
									isList: true,
									txt: `Trouve les cinq appels √† Contact. Pour chacun d'entre eux, tu devras passer des props diff√©rents au composant :`
								},
								{
									isList: true,
									txt: `1 - Name`
								},
								{
									isList: true,
									txt: `2 - Email`
								},
								{
									isList: true,
									txt: `3 - Phone`
								},
								{
									isList: true,
									txt: `Adapte le console.log pour afficher les props dans la console`
								}
							],
						},
					],
				},
			},
		],
	},
];
